{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/posts/04-constructor-object/",
    "result": {"data":{"markdownRemark":{"html":"<blockquote class=\"brown-border bg-soft\">\n<p>객체 리터럴은 포함시키지 않았다.</p>\n</blockquote>\n<br>\n<h2>object 생성자 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'jiyong'</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, My name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Object 생성자 함수를 호출하면 빈 객체가 생성된다.</li>\n<li>프로퍼티와 메서드를 추가하여 객체를 완성할 수 있다.</li>\n<li>Object 이외에도 <code class=\"language-text\">String, Number, Boolean, Function, Array, Date, RegExp, Promise</code> 등의 <code class=\"language-text\">Built-in</code> 생성자 함수를 제공한다.</li>\n</ul>\n<br>\n<h2>생성자 함수</h2>\n<p>객체 리터럴에 의해 객체 생성을 하게 되면 동일한 프로퍼티를 가진 객체를 여러개 생성할 때 문제가 발생한다. 따라서 객체를 생성하기 위한 템플릿(Class) 처럼 생성자 함수를 선언한다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, My name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> jiyong <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jiyong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> seventwo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seventwo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> man <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일반 함수로 실행되어 this에 전역 객체가 바인딩 된다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// kim</span></code></pre></div>\n<ul>\n<li>new 연산자와 함께 호출하지 않으면 일반 함수로 동작한다.</li>\n</ul>\n<br>\n<p>함수가 일반 함수로서 호촐되면 함수 객체의 내부 메서드 <code class=\"language-text\">[[Call]]</code> 이 호출되고 new 연산자와 함께 생성자 함수로서 호출되면 내부 메서드 <code class=\"language-text\">[[Construct]]</code> 가 호출된다.</p>\n<p>함수 객체는 반드시 callable이어야 한다. 그러나 모든 함수 객체가 [[Construct]]를 갖는 것은 아니다.</p>\n<br>\n<h3>constructor와 non-constructor</h3>\n<ul>\n<li>constructor : 함수 선언문, 함수 표현식, 클래스</li>\n<li>non-constructor : 메서드, 화살표 함수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* ---constructor--- */</span>\n<span class=\"token comment\">// 함수 선언문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 함수를 프로퍼티 값으로 사용하면 일반적으로 메서드로 통칭한다.</span>\n<span class=\"token comment\">// 그러나 ECMAScirpt 사양에서 메서드란 ES6의 메서드 축약 표현만을 의미한다.</span>\n<span class=\"token comment\">// 프로퍼티에 할당된 것은 일반 함수로 정의된 함수이다. 이는 메서드가 아니다.</span>\n<span class=\"token keyword\">const</span> hey <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">prop</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* ---non-constructor--- */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"April 29, 2021","slug":"/posts/04-constructor-object","title":"[JavaScript] 생성자 함수와 객체 생성","description":"(모던 자바스크립트 deep dive) constructor와 객체 생성에 대해 알아보자 ~"}}},"pageContext":{"id":"3ed2261a-5bf7-59d2-9803-cf6424f59e24","frontmatter__slug":"/posts/04-constructor-object","__params":{"frontmatter__slug":"posts"}}},
    "staticQueryHashes": []}